{"version":3,"file":"component---src-templates-photo-collection-js-content-file-path-content-photos-tall-ships-event-2012-index-md-5c720f1e3a6e628366e6.js","mappings":"qMAGA,SAASA,EAAkBC,GACzB,OAAOC,EAAAA,cAAoBA,EAAAA,SAC7B,CAKA,MAJA,SAAoBD,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOE,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOJ,EAAYF,EAAAA,cAAoBE,EAAWH,EAAOC,EAAAA,cAAoBF,EAAmBC,IAAUD,GAC5G,E,8BCHA,MAAMS,EAA0BC,IAAsB,IAAAC,EAAA,IAArB,KAACC,EAAI,SAAEC,GAASH,EAC/C,MAAMI,EAAOF,EAAKG,IACZC,EAAmBJ,EAAKI,iBAAiBC,MACzCC,GAAkC,QAAtBP,EAAAC,EAAKO,KAAKC,oBAAY,IAAAT,OAAA,EAAtBA,EAAwBU,QAAK,QAC/C,OAAOnB,EAAAA,cAAoBoB,EAAAA,EAAQ,CACjCT,SAAUA,EACVQ,MAAOH,GACNhB,EAAAA,cAAoBqB,EAAAA,EAAK,CAC1BF,MAAOP,EAAKU,YAAYH,MACxBI,YAAaX,EAAKU,YAAYC,aAAeX,EAAKY,UAChDxB,EAAAA,cAAoB,UAAW,CACjCyB,UAAW,YACXC,WAAW,EACXC,SAAU,6BACT3B,EAAAA,cAAoB4B,EAAAA,GAAa,KAAMhB,EAAKU,YAAYH,OAAQL,EAAiBe,KAAI,CAACC,EAAOC,IACvF/B,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoBgC,EAAAA,IAAuBhC,EAAAA,cAAoBiC,EAAAA,GAA0B,CAC/HF,IAAKA,EACLG,MAAOJ,EAAMK,gBAAgBC,kBAC3BpC,EAAAA,cAAoBgC,EAAAA,QACrBhC,EAAAA,cAAoBqC,EAAAA,GAAoB,CAC3CC,GAAI,WACH,kBAAkB,EAGR,SAASC,EAAiBxC,GACvC,OAAOC,EAAAA,cAAoBO,EAAyBR,EAAOC,EAAAA,cAAoBwC,EAAqBzC,GACtG,C,sECCO,MAAM0C,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBpC,GAC/B,MAAMqC,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfnC,EACFA,EAAWqC,GAGb,IAAIA,KAAsBrC,IAChC,CAACqC,EAAmBrC,GACzB,C","sources":["webpack://robli-co-gatsby-src/./content/photos/tall-ships-event-2012/index.md","webpack://robli-co-gatsby-src/./src/templates/photo-collection.js","webpack://robli-co-gatsby-src/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  return React.createElement(React.Fragment);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/robli-co-gatsby-src/robli-co-gatsby-src/content/photos/tall-ships-event-2012/index.md\";\nimport React from \"react\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport {graphql} from \"gatsby\";\nimport {BackToPhotosButton, PhotoCollectionHeroImage, PhotosListSpacer10px, TitleHeader} from \"../components/custom-styled-components\";\nconst PhotoCollectionTemplate = ({data, location}) => {\n  const post = data.mdx;\n  const photosCollection = data.photosCollection.nodes;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  return React.createElement(Layout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(Seo, {\n    title: post.frontmatter.title,\n    description: post.frontmatter.description || post.excerpt\n  }), React.createElement(\"article\", {\n    className: \"blog-post\",\n    itemScope: true,\n    itemType: \"http://schema.org/Article\"\n  }, React.createElement(TitleHeader, null, post.frontmatter.title), photosCollection.map((photo, key) => {\n    return React.createElement(\"div\", null, React.createElement(PhotosListSpacer10px), React.createElement(PhotoCollectionHeroImage, {\n      key: key,\n      image: photo.childImageSharp.gatsbyImageData\n    }), React.createElement(PhotosListSpacer10px));\n  })), React.createElement(BackToPhotosButton, {\n    to: \"/photos\"\n  }, \"Back to photos\"));\n};\nPhotoCollectionTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PhotoCollectionTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`query PhotoCollectionBySlug($id: String!, $previousPhotoId: String, $nextPhotoId: String, $photoCollectionLocationRegex: String) {\n  site {\n    siteMetadata {\n      title\n    }\n  }\n  photosCollection: allFile(\n    filter: {sourceInstanceName: {eq: \"photos\"}, dir: {regex: $photoCollectionLocationRegex}, ext: {eq: \".jpg\"}}\n    sort: {childImageSharp: {fluid: {originalName: ASC}}}\n  ) {\n    nodes {\n      childImageSharp {\n        gatsbyImageData(quality: 100, layout: FULL_WIDTH)\n      }\n    }\n  }\n  mdx(id: {eq: $id}) {\n    id\n    excerpt(pruneLength: 160)\n    body\n    frontmatter {\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n      description\n      filesystem_directory\n    }\n  }\n  previous: mdx(id: {eq: $previousPhotoId}) {\n    fields {\n      slug\n    }\n    frontmatter {\n      title\n    }\n  }\n  next: mdx(id: {eq: $nextPhotoId}) {\n    fields {\n      slug\n    }\n    frontmatter {\n      title\n    }\n  }\n}`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","React","wrapper","MDXLayout","Object","assign","_provideComponents","components","PhotoCollectionTemplate","_ref","_data$site$siteMetada","data","location","post","mdx","photosCollection","nodes","siteTitle","site","siteMetadata","title","Layout","Seo","frontmatter","description","excerpt","className","itemScope","itemType","TitleHeader","map","photo","key","PhotosListSpacer10px","PhotoCollectionHeroImage","image","childImageSharp","gatsbyImageData","BackToPhotosButton","to","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}