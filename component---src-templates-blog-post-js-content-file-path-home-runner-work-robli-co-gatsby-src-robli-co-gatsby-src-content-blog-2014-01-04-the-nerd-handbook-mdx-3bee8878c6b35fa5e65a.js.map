{"version":3,"file":"component---src-templates-blog-post-js-content-file-path-home-runner-work-robli-co-gatsby-src-robli-co-gatsby-src-content-blog-2014-01-04-the-nerd-handbook-mdx-3bee8878c6b35fa5e65a.js","mappings":"qMAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,WAAY,aACZC,EAAG,IACHC,OAAQ,SACRC,EAAG,MACFC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,WAAY,KAAM,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,mJAAoJK,EAAAA,cAAoBT,EAAYK,OAAQ,KAAM,8FAA+F,qLAAsL,MAAO,KAAMI,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,WAAYK,EAAAA,cAAoBT,EAAYM,EAAG,CAC5sBI,KAAM,wDACL,oBACL,CAKA,MAJA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,wCCXA,MAAMc,EAAmBC,IAAgC,UAA/B,KAACC,EAAI,SAAEC,EAAQ,SAAEC,GAAS,EAClD,MAAMC,EAAOH,EAAKI,IACZC,GAAkC,QAAtB,EAAAL,EAAKM,KAAKC,oBAAY,aAAtBC,EAAwBC,QAAK,SACzC,SAACC,EAAQ,KAAEC,GAAQX,EACzB,OAAON,EAAAA,cAAoBkB,EAAAA,EAAQ,CACjCX,SAAUA,EACVQ,MAAOJ,GACNX,EAAAA,cAAoBmB,EAAAA,EAAK,CAC1BJ,MAAON,EAAKW,YAAYL,MACxBM,YAAaZ,EAAKW,YAAYC,aAAeZ,EAAKa,UAChDtB,EAAAA,cAAoB,UAAW,CACjCuB,UAAW,YACXC,WAAW,EACXC,SAAU,6BACTzB,EAAAA,cAAoB,SAAU,KAAMA,EAAAA,cAAoB,KAAM,CAC/D0B,SAAU,YACTjB,EAAKW,YAAYL,OAAQf,EAAAA,cAAoB2B,EAAAA,GAAkB,KAAMlB,EAAKW,YAAYQ,KAAM,OAAQ5B,EAAAA,cAAoB6B,EAAAA,KAAM,CAC/HC,GAAI,UACH,YAAa9B,EAAAA,cAAoB,UAAW,KAAMQ,GAAWR,EAAAA,cAAoB,MAAOA,EAAAA,cAAoB,WAAYA,EAAAA,cAAoB,MAAO,CACpJuB,UAAW,iBACVvB,EAAAA,cAAoB,KAAM,CAC3B+B,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAEVpC,EAAAA,cAAoB,KAAM,KAAMgB,GAAYhB,EAAAA,cAAoB6B,EAAAA,KAAM,CACvEC,GAAI,QAAQd,EAASqB,OAAOC,KAC5BC,IAAK,QACJ,MAAOvB,EAASI,YAAYL,QAASf,EAAAA,cAAoB,KAAM,KAAMiB,GAAQjB,EAAAA,cAAoB6B,EAAAA,KAAM,CACxGC,GAAI,QAAQb,EAAKoB,OAAOC,KACxBC,IAAK,QACJtB,EAAKG,YAAYL,MAAO,SAAS,EAGvB,SAASyB,EAAiBlD,GACvC,OAAOU,EAAAA,cAAoBI,EAAkBd,EAAOU,EAAAA,cAAoByC,EAAqBnD,GAC/F,C,sECbO,MAAMoD,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiB5C,GAC/B,MAAM6C,EAAoB,aAAiBF,GAE3C,OAAO,WAAc,IAEO,mBAAf3C,EACFA,EAAW6C,GAGb,IAAIA,KAAsB7C,IAChC,CAAC6C,EAAmB7C,GACzB,C","sources":["webpack://robli-co-gatsby-src/./content/blog/2014-01-04-The-Nerd-Handbook.mdx","webpack://robli-co-gatsby-src/./src/templates/blog-post.js","webpack://robli-co-gatsby-src/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"The nerd has based his career, maybe his life, on the computer, and as we’ll see, this intimate relationship has altered his view of the world. \", React.createElement(_components.strong, null, \"He sees the world as a system which, given enough time and effort, is completely knowable.\"), \" This is a fragile illusion that your nerd has adopted, but it’s a pleasant one that gets your nerd through the day. When the illusion is broken, you are going to discover that…\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Source: \", React.createElement(_components.a, {\n    href: \"http://randsinrepose.com/archives/the-nerd-handbook/\"\n  }, \"Rands in Repose\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/robli-co-gatsby-src/robli-co-gatsby-src/content/blog/2014-01-04-The-Nerd-Handbook.mdx\";\nimport React from \"react\";\nimport {Link, graphql} from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport {BlogPostMetadata} from \"../components/custom-styled-components\";\nconst BlogPostTemplate = ({data, location, children}) => {\n  const post = data.mdx;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const {previous, next} = data;\n  return React.createElement(Layout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(Seo, {\n    title: post.frontmatter.title,\n    description: post.frontmatter.description || post.excerpt\n  }), React.createElement(\"article\", {\n    className: \"blog-post\",\n    itemScope: true,\n    itemType: \"http://schema.org/Article\"\n  }, React.createElement(\"header\", null, React.createElement(\"h1\", {\n    itemProp: \"headline\"\n  }, post.frontmatter.title), React.createElement(BlogPostMetadata, null, post.frontmatter.date, \" by \", React.createElement(Link, {\n    to: \"/about\"\n  }, \"Rob Li\"))), React.createElement(\"section\", null, children), React.createElement(\"hr\"), React.createElement(\"footer\")), React.createElement(\"nav\", {\n    className: \"blog-post-nav\"\n  }, React.createElement(\"ul\", {\n    style: {\n      display: `flex`,\n      flexWrap: `wrap`,\n      justifyContent: `space-between`,\n      listStyle: `none`,\n      padding: 0\n    }\n  }, React.createElement(\"li\", null, previous && React.createElement(Link, {\n    to: `/blog${previous.fields.slug}`,\n    rel: \"prev\"\n  }, \" ← \", previous.frontmatter.title)), React.createElement(\"li\", null, next && React.createElement(Link, {\n    to: `/blog${next.fields.slug}`,\n    rel: \"next\"\n  }, next.frontmatter.title, \" →\")))));\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query BlogPostTemplate(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    mdx(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n#      body\n      frontmatter {\n        title\n        date(formatString: \"dddd, DD MMMM YYYY\")\n        description\n#        author\n        tags\n      }\n    }\n    previous: mdx(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: mdx(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","blockquote","p","strong","a","_provideComponents","components","React","href","wrapper","MDXLayout","BlogPostTemplate","_ref","data","location","children","post","mdx","siteTitle","site","siteMetadata","_data$site$siteMetada","title","previous","next","Layout","Seo","frontmatter","description","excerpt","className","itemScope","itemType","itemProp","BlogPostMetadata","date","Link","to","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}